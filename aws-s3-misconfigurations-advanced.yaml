id: aws-s3-misconfigurations-advanced

info:
  name: Ultra Advanced AWS S3 Bucket Misconfiguration Detection
  author: Unrealisedd
  severity: critical
  description: This template performs a highly sophisticated detection of AWS S3 bucket misconfigurations. It incorporates adaptive payloads, dynamic response analysis, advanced error handling, parallel requests, and integrates with external services for comprehensive assessments. Includes automated reporting and cleanup scripts.
  tags: aws, s3, bucket, misconfiguration, security, advanced, automation, external-integration

variables:
  bucket_names:
    - "test-bucket"
    - "public-bucket"
    - "example-bucket"
    - "sample-bucket"

  user_agents:
    - "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
    - "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.0.3 Safari/605.1.15"
    - "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.114 Safari/537.36"

  external_service_url: "https://example-external-service.com/api"
  cleanup_script: |
    #!/bin/bash
    echo "Starting cleanup..."
    aws s3 rm s3://{{bucket_name}} --recursive
    echo "Cleanup complete."

  payloads:
    - "Cmd": ["aws s3 ls s3://{{bucket_name}}"]
    - "Cmd": ["aws s3 cp s3://{{bucket_name}}/file.txt ."]
    - "Cmd": ["aws s3 rm s3://{{bucket_name}}/file.txt"]

  dynamic_payloads:
    - "Cmd": ["aws s3 cp s3://{{bucket_name}}/{{random_string(10)}} ."]
    - "Cmd": ["aws s3 ls s3://{{bucket_name}}/{{random_string(5)}}"]

requests:
  - method: GET
    path:
      - "https://{{bucket_name}}.s3.amazonaws.com/"
      - "https://{{bucket_name}}.s3.amazonaws.com/robots.txt"

    headers:
      User-Agent: "{{user_agents}}"

    timeout: 10
    delay: 2
    concurrency: 5
    matchers-condition: and
    matchers:
      - type: status
        status:
          - 200
          - 403

      - type: word
        part: body
        words:
          - "Access Denied"
          - "NoSuchBucket"

      - type: regex
        regex:
          - "s3.amazonaws.com"
        condition: and

    extractors:
      - type: regex
        part: body
        group: 1
        regex:
          - "AccessControlPolicy"
          - "NoSuchBucket"
      - type: regex
        part: body
        group: 1
        regex:
          - "PublicAccessBlockConfiguration"
          - "BucketPolicy"

  - method: GET
    path:
      - "https://{{bucket_name}}.s3.amazonaws.com/?list-type=2"

    headers:
      User-Agent: "{{user_agents}}"

    matchers:
      - type: status
        status:
          - 200

      - type: word
        part: body
        words:
          - "<Contents>"

    extractors:
      - type: regex
        part: body
        group: 1
        regex:
          - "<Contents>"
          - "<Key>"
      - type: regex
        part: body
        group: 1
        regex:
          - "<Key>(.*?)</Key>"

  - method: POST
    path:
      - "https://{{bucket_name}}.s3.amazonaws.com/?acl"

    body: |
      <AccessControlPolicy>
        <Owner>
          <ID>{{random_string(20)}}</ID>
        </Owner>
        <AccessControlList>
          <Grant>
            <Grantee>
              <URI>http://acs.amazonaws.com/groups/global/AllUsers</URI>
            </Grantee>
            <Permission>READ</Permission>
          </Grant>
        </AccessControlList>
      </AccessControlPolicy>

    headers:
      User-Agent: "{{user_agents}}"

    matchers:
      - type: status
        status:
          - 200

      - type: word
        part: body
        words:
          - "Grantee"
          - "Permission"

    extractors:
      - type: regex
        part: body
        group: 1
        regex:
          - "<Grantee>.*?</Grantee>"
          - "<Permission>.*?</Permission>"

  - method: POST
    path:
      - "https://{{bucket_name}}.s3.amazonaws.com/?policy"

    body: |
      {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Principal": "*",
            "Action": "s3:GetObject",
            "Resource": "arn:aws:s3:::{{bucket_name}}/*"
          }
        ]
      }

    headers:
      User-Agent: "{{user_agents}}"

    matchers:
      - type: status
        status:
          - 200

      - type: word
        part: body
        words:
          - "Policy"
          - "Effect"

    extractors:
      - type: regex
        part: body
        group: 1
        regex:
          - "Effect"
          - "Principal"

  - method: DELETE
    path:
      - "https://{{bucket_name}}.s3.amazonaws.com/?cleanup"

    headers:
      User-Agent: "{{user_agents}}"

    matchers:
      - type: status
        status:
          - 204

    post-request:
      - script: "{{cleanup_script}}"
        delay: 10

rate-limit: 2
log-to: advanced-s3-misconfigurations-log.txt
